//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace KTKS_DonKH.wrEContract {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsEContractSoap", Namespace="http://tempuri.org/")]
    public partial class wsEContract : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getAccess_tokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback renderEContractOperationCompleted;
        
        private System.Threading.SendOrPostCallback createEContractOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendEContractOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wsEContract() {
            this.Url = global::KTKS_DonKH.Properties.Settings.Default.KTKS_DonKH_wrEContract_wsEContract;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getAccess_tokenCompletedEventHandler getAccess_tokenCompleted;
        
        /// <remarks/>
        public event renderEContractCompletedEventHandler renderEContractCompleted;
        
        /// <remarks/>
        public event createEContractCompletedEventHandler createEContractCompleted;
        
        /// <remarks/>
        public event sendEContractCompletedEventHandler sendEContractCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getAccess_token", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getAccess_token(string checksum) {
            object[] results = this.Invoke("getAccess_token", new object[] {
                        checksum});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getAccess_tokenAsync(string checksum) {
            this.getAccess_tokenAsync(checksum, null);
        }
        
        /// <remarks/>
        public void getAccess_tokenAsync(string checksum, object userState) {
            if ((this.getAccess_tokenOperationCompleted == null)) {
                this.getAccess_tokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAccess_tokenOperationCompleted);
            }
            this.InvokeAsync("getAccess_token", new object[] {
                        checksum}, this.getAccess_tokenOperationCompleted, userState);
        }
        
        private void OngetAccess_tokenOperationCompleted(object arg) {
            if ((this.getAccess_tokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAccess_tokenCompleted(this, new getAccess_tokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/renderEContract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] renderEContract(
                    string HopDong, 
                    string DanhBo, 
                    System.DateTime CreateDate, 
                    string HoTen, 
                    string CCCD, 
                    string NgayCap, 
                    string DCThuongTru, 
                    string DCHienNay, 
                    string DienThoai, 
                    string Fax, 
                    string Email, 
                    string TaiKhoan, 
                    string Bank, 
                    string MST, 
                    string CoDHN, 
                    string DCLapDat, 
                    string NgayHieuLuc, 
                    string checksum, 
                    out string strResponse) {
            object[] results = this.Invoke("renderEContract", new object[] {
                        HopDong,
                        DanhBo,
                        CreateDate,
                        HoTen,
                        CCCD,
                        NgayCap,
                        DCThuongTru,
                        DCHienNay,
                        DienThoai,
                        Fax,
                        Email,
                        TaiKhoan,
                        Bank,
                        MST,
                        CoDHN,
                        DCLapDat,
                        NgayHieuLuc,
                        checksum});
            strResponse = ((string)(results[1]));
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void renderEContractAsync(
                    string HopDong, 
                    string DanhBo, 
                    System.DateTime CreateDate, 
                    string HoTen, 
                    string CCCD, 
                    string NgayCap, 
                    string DCThuongTru, 
                    string DCHienNay, 
                    string DienThoai, 
                    string Fax, 
                    string Email, 
                    string TaiKhoan, 
                    string Bank, 
                    string MST, 
                    string CoDHN, 
                    string DCLapDat, 
                    string NgayHieuLuc, 
                    string checksum) {
            this.renderEContractAsync(HopDong, DanhBo, CreateDate, HoTen, CCCD, NgayCap, DCThuongTru, DCHienNay, DienThoai, Fax, Email, TaiKhoan, Bank, MST, CoDHN, DCLapDat, NgayHieuLuc, checksum, null);
        }
        
        /// <remarks/>
        public void renderEContractAsync(
                    string HopDong, 
                    string DanhBo, 
                    System.DateTime CreateDate, 
                    string HoTen, 
                    string CCCD, 
                    string NgayCap, 
                    string DCThuongTru, 
                    string DCHienNay, 
                    string DienThoai, 
                    string Fax, 
                    string Email, 
                    string TaiKhoan, 
                    string Bank, 
                    string MST, 
                    string CoDHN, 
                    string DCLapDat, 
                    string NgayHieuLuc, 
                    string checksum, 
                    object userState) {
            if ((this.renderEContractOperationCompleted == null)) {
                this.renderEContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrenderEContractOperationCompleted);
            }
            this.InvokeAsync("renderEContract", new object[] {
                        HopDong,
                        DanhBo,
                        CreateDate,
                        HoTen,
                        CCCD,
                        NgayCap,
                        DCThuongTru,
                        DCHienNay,
                        DienThoai,
                        Fax,
                        Email,
                        TaiKhoan,
                        Bank,
                        MST,
                        CoDHN,
                        DCLapDat,
                        NgayHieuLuc,
                        checksum}, this.renderEContractOperationCompleted, userState);
        }
        
        private void OnrenderEContractOperationCompleted(object arg) {
            if ((this.renderEContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.renderEContractCompleted(this, new renderEContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/createEContract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string createEContract(
                    string HopDong, 
                    string DanhBo, 
                    System.DateTime CreateDate, 
                    string HoTen, 
                    string CCCD, 
                    string NgayCap, 
                    string DCThuongTru, 
                    string DCHienNay, 
                    string DienThoai, 
                    string Fax, 
                    string Email, 
                    string TaiKhoan, 
                    string Bank, 
                    string MST, 
                    string CoDHN, 
                    string DCLapDat, 
                    string NgayHieuLuc, 
                    bool GanMoi, 
                    bool CaNhan, 
                    string MaDon, 
                    string SHS, 
                    string checksum) {
            object[] results = this.Invoke("createEContract", new object[] {
                        HopDong,
                        DanhBo,
                        CreateDate,
                        HoTen,
                        CCCD,
                        NgayCap,
                        DCThuongTru,
                        DCHienNay,
                        DienThoai,
                        Fax,
                        Email,
                        TaiKhoan,
                        Bank,
                        MST,
                        CoDHN,
                        DCLapDat,
                        NgayHieuLuc,
                        GanMoi,
                        CaNhan,
                        MaDon,
                        SHS,
                        checksum});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createEContractAsync(
                    string HopDong, 
                    string DanhBo, 
                    System.DateTime CreateDate, 
                    string HoTen, 
                    string CCCD, 
                    string NgayCap, 
                    string DCThuongTru, 
                    string DCHienNay, 
                    string DienThoai, 
                    string Fax, 
                    string Email, 
                    string TaiKhoan, 
                    string Bank, 
                    string MST, 
                    string CoDHN, 
                    string DCLapDat, 
                    string NgayHieuLuc, 
                    bool GanMoi, 
                    bool CaNhan, 
                    string MaDon, 
                    string SHS, 
                    string checksum) {
            this.createEContractAsync(HopDong, DanhBo, CreateDate, HoTen, CCCD, NgayCap, DCThuongTru, DCHienNay, DienThoai, Fax, Email, TaiKhoan, Bank, MST, CoDHN, DCLapDat, NgayHieuLuc, GanMoi, CaNhan, MaDon, SHS, checksum, null);
        }
        
        /// <remarks/>
        public void createEContractAsync(
                    string HopDong, 
                    string DanhBo, 
                    System.DateTime CreateDate, 
                    string HoTen, 
                    string CCCD, 
                    string NgayCap, 
                    string DCThuongTru, 
                    string DCHienNay, 
                    string DienThoai, 
                    string Fax, 
                    string Email, 
                    string TaiKhoan, 
                    string Bank, 
                    string MST, 
                    string CoDHN, 
                    string DCLapDat, 
                    string NgayHieuLuc, 
                    bool GanMoi, 
                    bool CaNhan, 
                    string MaDon, 
                    string SHS, 
                    string checksum, 
                    object userState) {
            if ((this.createEContractOperationCompleted == null)) {
                this.createEContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateEContractOperationCompleted);
            }
            this.InvokeAsync("createEContract", new object[] {
                        HopDong,
                        DanhBo,
                        CreateDate,
                        HoTen,
                        CCCD,
                        NgayCap,
                        DCThuongTru,
                        DCHienNay,
                        DienThoai,
                        Fax,
                        Email,
                        TaiKhoan,
                        Bank,
                        MST,
                        CoDHN,
                        DCLapDat,
                        NgayHieuLuc,
                        GanMoi,
                        CaNhan,
                        MaDon,
                        SHS,
                        checksum}, this.createEContractOperationCompleted, userState);
        }
        
        private void OncreateEContractOperationCompleted(object arg) {
            if ((this.createEContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createEContractCompleted(this, new createEContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendEContract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendEContract(string MaDon, string SHS, string checksum) {
            object[] results = this.Invoke("sendEContract", new object[] {
                        MaDon,
                        SHS,
                        checksum});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendEContractAsync(string MaDon, string SHS, string checksum) {
            this.sendEContractAsync(MaDon, SHS, checksum, null);
        }
        
        /// <remarks/>
        public void sendEContractAsync(string MaDon, string SHS, string checksum, object userState) {
            if ((this.sendEContractOperationCompleted == null)) {
                this.sendEContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendEContractOperationCompleted);
            }
            this.InvokeAsync("sendEContract", new object[] {
                        MaDon,
                        SHS,
                        checksum}, this.sendEContractOperationCompleted, userState);
        }
        
        private void OnsendEContractOperationCompleted(object arg) {
            if ((this.sendEContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendEContractCompleted(this, new sendEContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getAccess_tokenCompletedEventHandler(object sender, getAccess_tokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAccess_tokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAccess_tokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void renderEContractCompletedEventHandler(object sender, renderEContractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class renderEContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal renderEContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string strResponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void createEContractCompletedEventHandler(object sender, createEContractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createEContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createEContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void sendEContractCompletedEventHandler(object sender, sendEContractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendEContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendEContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591